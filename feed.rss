<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>sookim-1</title><description>Weekly Episodes</description><link>https://sookim-1.github.io</link><language>ko</language><lastBuildDate>Mon, 15 Apr 2024 06:27:52 +0000</lastBuildDate><pubDate>Mon, 15 Apr 2024 06:27:52 +0000</pubDate><ttl>250</ttl><atom:link href="https://sookim-1.github.io/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://sookim-1.github.io/posts/011-20240415</guid><title>번호 : 011, 작성일자: 2024-04-15</title><description>Bottom Sheet 구현, 네이버지도 커스텀마커 적용, UIStackView 사용시 주의사항, Kingfisher Xcode15에서 사용시 주의사항</description><link>https://sookim-1.github.io/posts/011-20240415</link><pubDate>Mon, 15 Apr 2024 15:00:00 +0000</pubDate><content:encoded><![CDATA[<h1>번호 : 011, 작성일자: 2024-04-15</h1><h2>2024.04.08 ~ 2024.04.14</h2><h3>📱 Bottom Sheet</h3><p>앱의 어느위치에서든 아래에서 올라오는 스타일을 BottomSheet라고 정의한다.</p><p>BottomSheet는 스크롤에 따라서 화면을 변경할 수 있다.</p><blockquote><p>이번에 구현해보았던 BottomSheet의 조건</p></blockquote><ol><li>스크롤을 위로 특정 높이만큼 되었다면 최대 높이로 화면을 표시</li><li>스크롤을 기본 높이 정도 아래로 내린 경우 기본 높이로 화면을 표시</li><li>스크롤을 최소높이 아래로 내린 경우 화면을 사라지게 하도록 표시</li></ol><p>구현방법은 superview에 UIPanGestureRecognizer를 추가하고 이벤트로 전달받은 UIPanGestureRecognizer의 state를 통해 종료된 경우와 변경 중인 경우를 전달받는다.</p><p>그리고 해당시점에 UIPanGestureRecognizer의 view의 좌표를 전달받아서 처음 설정했던 높이들과 비교하여 BottomSheet의 높이를 변경했다.</p><hr><h3>🗺️ 네이버지도 커스텀마커</h3><p>네이버지도 SDK를 사용 중인 경우 사용자에게 좌표에 대한 정보를 표시하기 위해 마커를 사용할 경우가 있다. 네이버지도에서 마커를 표시하기 위해서는 NMFOverlayImage를 전달해야 하는데 해당 객체를 생성하기 위해서는 UIImage나 에셋의 이미지명을 제공하여 생성할 수 있다.</p><p>하지만, 이번에 이미지와 텍스트가 합쳐진 마커를 표시해야했기 때문에 커스텀뷰를 생성한 후 UIImage로 변경하여 커스텀마커를 표시했다.</p><p>텍스트가 유동적으로 변경해야하는 조건이 있어서 intrinsicContentSize로 텍스트의 크기를 가져온 후 프레임을 재조정 한 후 layoutIfNeeded 메서드로 업데이트해서 해결할 수 있었다.</p><p><a href="https://velog.io/@will_d/iOS-Naver-Map-CustomMarker">iOS Naver Map CustomMarker</a> 해당 블로그를 참고했는데 도움이 많이 되었다.</p><hr><h3>🙋🏻‍♂️ 기타 사항</h3><ol><li>UIStackView를 생성한 후 SubView들을 추가할 때 실수로 <code>addArrangedSubview</code> 가 아니라 <code>addSubview</code> 로 추가했는데 확인을 하지 못하고 다른 부분의 레이아웃을 검토하느라 시간을 많이 낭비했다. 다음부터 더 주의해서 사용해야겠다.</li><li>Xcode 15이상에서 Kingfisher의 <code>ImageResource</code> 타입을 사용한다면 Xcode15에서 새로 추가된 <code>ImageResource</code> 타입과 이름이 동일하여 충돌이 발생한다. 따라서 타입별칭을 이용하여 사용해야한다.<ul></ul></li></ol><pre><code class="language-swift">    typealias KFImageResource = Kingfisher.ImageResource
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://sookim-1.github.io/posts/010-20240408</guid><title>번호 : 010, 작성일자: 2024-04-08</title><description>UITabBar 여러가지 활용방법, FireStore와 FirebaseAuth를 활용한 MVVM-Chat 구현, 애니메이션 목록 API Postman 정리, 네이버지도 카메라 Delegate 이슈</description><link>https://sookim-1.github.io/posts/010-20240408</link><pubDate>Mon, 8 Apr 2024 15:00:00 +0000</pubDate><content:encoded><![CDATA[<h1>번호 : 010, 작성일자: 2024-04-08</h1><h2>2024.04.01 ~ 2024.04.07</h2><h3>📱 UITabBar, UITabBarController</h3><p>사이드프로젝트를 시작하면서 UITabBar를 활용하여 홈화면을 구성할 예정이여서 여러가지에 대해서 알아보았다.</p><p>1️⃣번째로는 UITabBar를 숨김처리하는 방법은 여러가지인데 한 곳에서 처리하도록 하는 방법을 사용해보았다.</p><p>기존에 숨김처리를 하기 위해서 숨김처리할 화면의 viewWillAppear가 호출될 때 tabbar.isHidden을 하거나 tabbar.frame을 조정하거나, push가 될때 <a href="https://developer.apple.com/documentation/uikit/uiviewcontroller/1621863-hidesbottombarwhenpushed"><strong>hidesBottomBarWhenPushed</strong></a>프로퍼티를 활용했는데 매번 새로운화면이 추가될 때 확인을 해야하거나 헷갈릴 수 있기 때문에 한 곳에서 처리를 하도록 하면 관리와 협업을 하는 경우 헷갈리지 않을 수 있고 장점이 많은 것 같다.</p><p>2️⃣번째로는 TabBar의 Item을 선택한 경우 화면이 전환 될 때 애니메이션등을 처리해보았다. 기본적으로 애니메이션 스타일에 대해서는 각각 다를 수 있지만, 처리하는 부분은 모두 비슷한 것 같다. UITabBarControllerDelegate의 메서드인 <a href="https://developer.apple.com/documentation/uikit/uitabbarcontrollerdelegate/1621167-tabbarcontroller"><strong>tabBarController(_:animationControllerForTransitionFrom:to:)</strong></a>에서 UIViewControllerAnimatedTransitioning프로토콜을 채택하는 애니메이터객체를 반환하면 적용이 된다.</p><p>Slide형식과 확대,축소되는 형식 2가지 스타일을 적용해보고 비교해보았다.</p><p>3️⃣번째로는 CustomTabBar로 변경하였다. 기본 TabBar를 변경하는 경우 애니메이션 처리 부분, frame 조정등 제한이 있기 때문에 UIStackView를 활용하여 기본 TabBar를 대체하여 사용했다. 각각의 TabItem은 UIView로 적용했기 때문에 RxGesture를 도입하여 tap이벤트를 적용해보았다.</p><hr><h3>😅 채팅화면 리팩토링</h3><p>채팅화면이 기존에 1:1 구조였는데 1:N구조에 대해서 대비하기 위해서, <a href="https://github.com/sookim-1/Firebase_Learn_Project"><strong>Firebase<em>Learn</em>Project</strong></a>의 프로젝트에서 구현해보았다.</p><p>FireStore DB구조는 FirebaseAuth를 활용하여 각 사용자별 Uid로 구분하고 채팅방을 매칭시키는 구조다.</p><p>채팅관련 코드들은 MVVM구조다.</p><p>FireStore 마지막 채팅내역이 아닌 경우까지 첫 화면은 로딩을 표시하는 방법을 해결하지 못했다.</p><hr><h3>🙋🏻‍♂️ 기타 사항</h3><ol><li>사이드프로젝트를 위해 애니메이션 목록 관련 API를 찾아보았는데 MyAnimeList API가 유명했고 해당 API를 Copy한 Jikan API가 있었는데 개발하는 시점에 Jikan을 사용하고 완료되면 MyAnimeList로 변경하는 방법을 고려해봐야겠다. 2가지 비교를 위해 Postman에 각 WorkSpace를 생성하여 정리했다.</li><li>iOS 네이버지도 SDK를 사용하면 처음 화면에서 NaverMapView가 로드될때 NMFMapViewCameraDelegate 메서드가 호출되기 때문에 RxGesture를 활용하여 view가 gesture를 받기 전까지 NMFMapViewCameraDelegate의 메서드 이벤트를 모두 skip한 후 gesture를 받은 후부터 처리하도록 변경했다.</li><li>티스토리에 <a href="https://sookim-1.tistory.com/3"><strong>Xcode Preview관련 글</strong></a>을 작성했다.</li></ol>]]></content:encoded></item><item><guid isPermaLink="true">https://sookim-1.github.io/posts/009-20240401</guid><title>번호 : 009, 작성일자: 2024-04-01</title><description>Notification Service Extension, App Switcher상태일 때 앱 화면 변경, VerticalCardSwiper 라이브러리, Notion 정리, Preview 기능 활용, systemLayoutSizeFitting메서드</description><link>https://sookim-1.github.io/posts/009-20240401</link><pubDate>Mon, 1 Apr 2024 15:00:00 +0000</pubDate><content:encoded><![CDATA[<h1>번호 : 009, 작성일자: 2024-04-01</h1><h2>2024.03.25 ~ 2024.03.31</h2><h3>📱 Xcode Preview 기능</h3><p>Xcode에서 Preview기능을 활용하면 실제 기기 및 시뮬레이터를 사용하지 않고 최신 상태의 뷰 콘텐츠를 표시할 수 있어서 코드로 화면개발을 할 때 편리하다.</p><p>하지만, 실제 프로젝트에서 여러개의 라이브러리를 추가하고 빌드시간이 오래걸리는 프로젝트인 경우 오히려 실제기기를 빌드하는 게 더 빠른 경우도 있었기 때문에 해당 기능은 주로 빌드시간이 짧은 프로젝트의 경우 편리하다고 생각했다.</p><p>해당 기능은 주로 SwiftUI에서 자주 사용하고 UIKit에서 사용하는 방법이 존재하지만, 프로토콜을 채택해서 구현해서 추가해야되기 때문에 새로운 프로젝트를 생성할 때마다 코드를 추가해야하는 번거로움이 있었다.</p><p>iOS17이상부터 Swift Macro기능을 활용해서 굉장히 간단하게 UIKit에서도 사용할 수 있어서 <a href="https://sookim-1.tistory.com/3">블로그</a>에 정리를 해보았고 이제 해당 기능을 간단한 프로젝트에서부터 자주 사용해볼 예정이다.</p><hr><h3>😅 systemLayoutSizeFitting</h3><p>어느 화면이 UITableView로 구현한 화면이 있었는데 Footer부분의 버튼 및 뷰가 사용자의 상태별로 숨김처리 및 표시가 되어야하는 경우가 있어서 UITableView Footer의 높이가 유동적으로 변해야했다.</p><p>따라서 <a href="https://developer.apple.com/documentation/uikit/uiview/1622623-systemlayoutsizefitting">systemLayoutSizeFitting(_:withHorizontalFittingPriority:verticalFittingPriority:)</a>를 사용하여 최적크기를 반환하는 메서드를 사용하여 높이를 구하였는데 컨텐츠영역이 짤리는 이슈가 발생했다.</p><p>이유는 targetSize만 지정된 경우에도 최적크기를 구할 수는 있지만, 좀 더 targetSize에 정확한 크기를 얻기 위해 수직제약조건의 파라미터의 값을 설정함으로써 정확한 크기를 반환했다.</p><hr><h3>🔔 Notification Sevice Extension</h3><p>기본적으로 iOS에서는 Remote Notification을 표시하기 위해서는 APNs를 거쳐서 Push를 전달받을 수 있다.</p><p>따라서 APNs에 전송할 때 payload에 필요한 설정 및 정보들을 전달하게 된다.</p><p>알림 종류별로 그룹화하고 새 알림이 온다면 이전 알림들을 제거하는 기능을 도입하고 싶어서 Extension을 활용하면 적용할 수 있는지 확인해보았지만, 서버에서 데이터를 전달할 때 payload설정을 통해서만 가능한 작업이였다.</p><p>해당 내용을 알게되면서 <a href="https://developer.apple.com/documentation/usernotifications/unnotificationserviceextension">Service Extension</a>으로 활용할 수 있는 작업에 대해서 알아보았다.</p><ul><li>원격알림의 내용을 수정할 수 있는 경우<ul><li>암호화된 형식으로 전송된 데이터의 암호를 해독합니다.</li><li>크기가 최대 페이로드 크기를 초과하는 이미지 또는 기타 미디어 첨부 파일을 다운로드합니다.</li><li>사용자 기기의 데이터를 통합하여 알림의 내용을 업데이트합니다.</li></ul></li></ul><p>요약하자면 alert에 전달된 내용을 변경하는 기능을 담당한다. (텍스트 변경 및 이미지 추가)</p><hr><h3>🙋🏻‍♂️ 기타 사항</h3><ol><li>블로그에 올리는 글을 제외한 모든 글들을 개인 Notion에 정리 중인데 Notion계정이 학생인증으로 인해 네이버이메일로 되어있어서 이제 더 이상 사용할 이유가 없어져서 지메일로 옮기기 위해 모든 페이지를 옮기는 작업을 진행했다. 또한, 페이지들을 관리하기 편하기위해 Notion의 데이터베이스기능을 활용하여 나만의 템플릿을 지정하여 정리하였다.</li><li>현대카드 iOS앱을 보았는데 카드형식으로 넘기는 UI가 있어서 구현하는 방법을 살펴보았다. 관련된 라이브러리 중 <a href="https://github.com/JoniVR/VerticalCardSwiper">VerticalCardSwiper</a>라는 라이브러리가 있었다. 해당 라이브러리의 코드를 보고 어떻게 구현했는지 살펴보았다.</li><li>금융 및 카드앱에서 백그라운드로 가는 경우 앱의 화면이 가려지는 경우가 있어서 어떻게 구현했는 지 보았는데 App Switcher 상태라고 하는 상태가 있어서 아이폰에서 앱을 들어올린 경우에 대해서 정의한 상태였다.</li></ol>]]></content:encoded></item><item><guid isPermaLink="true">https://sookim-1.github.io/posts/008-20240325</guid><title>번호 : 008, 작성일자: 2024-03-25</title><description>HTML 텍스트 처리, Atributika 라이브러리, App Hangs, NSTimer 비동기 작업 처리, Xcode Discard 복구</description><link>https://sookim-1.github.io/posts/008-20240325</link><pubDate>Mon, 25 Mar 2024 16:00:00 +0000</pubDate><content:encoded><![CDATA[<h1>번호 : 008, 작성일자: 2024-03-25</h1><h2>2024.03.18 ~ 2024.03.24</h2><h3>📱 HTML 텍스트 표시하기 (+ Atributika 라이브러리)</h3><p>모바일앱은 배포를 하게되면 수정사항이 필요한 경우 심사요청을 한 후 심사가 완료되어야 배포를 진행할 수 있다. 그런데 자주 변경되어야 하는 텍스트로 인해 여러번 배포하는 일을 피하기 위해서 서버에서 해당 텍스트를 내려줄 수 있다.</p><p>그런데, 서버에서 내려주는 텍스트의 스타일도 포함시키고 싶은 경우 HTML텍스트를 이용하면 편리하게 사용가능하다.</p><p>기존에 사용했던 방식은 HTML텍스트를 data로 변환 후 디코딩하여 NSAttributedString형식으로 반환해주면 UILabel 또는 UITextView에 표시하여 사용했었다.</p><p>하지만 순서없는 목록을 표시하기 위해 <code>&lt;ul&gt;</code> , <code>&lt;li&gt;</code> 태그를 사용했는데 <code>&lt;br&gt;</code> 태그가 있는 줄에 bullet point가 생성되는 이슈가 있었다. 기본적으로 apple에서 어떤식으로 디코딩하는지에 대한 원리를 제공하지 않기 때문에 차선책으로 Atributika라는 라이브러리를 도입하여 <code>&lt;li&gt;</code> 태그를 bullet point문자로 변환한 후 스타일을 적용하도록 해서 디자인대로 표시되도록 적용했다.</p><p>Atributika라이브러리에 대한 글이 많지 않아 티스토리블로그에 글을 작성하여 올렸다.</p><ul><li><a href="https://sookim-1.tistory.com/2">Atributika라이브러리 (HTML to NSAttributedString)</a></li></ul><hr><h3>🙋🏻‍♂️ 기타 사항</h3><ol><li>Sentry를 도입한 후 AppHanging이라는 이슈가 심심치 않게 올라와서 확인해본 결과 WatchDog 스레드에 sentry에서 제공하는 AppHangTracker를 시작하여 주기적으로 메인스레드가 제한시간내에 작업항목을 실행하는지 확인한 후 2초이상 응답하지 않으면 AppHanging 이벤트가 생성된다고 한다. Sentry 문서에서도 예외상황이 여러 가지 있어서 해당 옵션을 비활성화하도록 했다.<ul><li><a href="https://developer.apple.com/documentation/xcode/understanding-hangs-in-your-app">Apple - <strong>Understanding hangs in your app</strong></a></li><li><a href="https://docs.sentry.io/platforms/apple/configuration/app-hangs/">Sentry - App Hangs</a></li></ul></li></ol><ol start="2"><li>실시간 데이터를 응답받기 위해 사용하는 기술이 Socket-cluster, Remote Notification, REST API를 사용 중 인데 각각의 데이터를 응답 받아 처리하는 객체가 중구난방이여서 하나의 객체가 서버의 실시간 데이터를 응답받아 처리하도록 리팩토링을 진행했다.<ul><li><strong>Socket-cluster</strong> ——&gt; <strong>REST API</strong> ——&gt; <strong>Remote Notification</strong></li></ul></li></ol><ol start="3"><li>기존의 PHP API 한 가지를 Java API로 변경하여 대응하도록 수정했다.<ul></ul></li></ol><ol start="4"><li>Xcode에서 변경 작업사항들을 Discard 했을 때, 복구하고 싶다면 Mac의 TextEdit(텍스트편집기)를 이용하여 복구할 수 있는 방법을 찾았다.<ul></ul></li></ol><ol start="5"><li>NSTimer에서 동작한 작업이 비동기 작업인 경우 NSTimer를 종료시켜도 비동기 작업은 별개로 진행되기 때문에 비동기 작업이 완료되었을 때 NSTimer가 nil인 경우 처리를 하지 않도록 하는 방법을 찾았다.</li></ol>]]></content:encoded></item><item><guid isPermaLink="true">https://sookim-1.github.io/posts/007-20240318</guid><title>번호 : 007, 작성일자: 2024-03-18</title><description>CollectionView 관련 이슈, UI 관련 이슈</description><link>https://sookim-1.github.io/posts/007-20240318</link><pubDate>Mon, 18 Mar 2024 17:00:00 +0000</pubDate><content:encoded><![CDATA[<h1>번호 : 007, 작성일자: 2024-03-18</h1><h2>2024.03.11 ~ 2024.03.17</h2><h3>📱 CollectionView Compositional Layout</h3><p>지지난주 Compositional Layout을 사용하여 신규 화면개발을 진행한 후 셀이 선택되었을 때 및 데이터를 연결하는 작업을 지난 주에 진행했다. 관련 작업을 진행하면서 여러가지 상황을 겪어보았다.</p><ol><li>셀 터치<ul><li>셀이 터치되었을 때 UI를 변경하기 위해서 <code>isSelected</code>를 상속받아 값이 변경될 때 UI를 변경하였는데 해당 방식으로 진행시 세밀한 커스텀동작을 구현할 수 없어서 <code>cellForRowAt</code>메서드에서 조건문 또는 플래그를 이용해서 선택된 셀과 선택되지 않은 셀들의 UI를 설정하는 방법으로 변경했다.</li></ul></li></ol><ol start="2"><li>셀 Highlight<ul><li>셀 내부의 네이버지도SDK의 네이버맵뷰를 추가하였는데 셀이 터치되었을 때 Highlight처리가 되면서 네이버로고를 클릭했을 때 검정색으로 표시되는 이슈가 있었다. UITableViewCell에는 <code>selectionStyle</code> 을 none으로 설정할 수 있지만 UICollectionViewCell은 지원하지 않았다. 그래서, <code>shouldHighlightItemAt</code>메서드에서 해당 셀만 Highlight되지 않도록 수정했다. 해당 메서드에서 <code>return false</code>를 하면 셀이 터치가 안되는 이슈가 있었는데 터치가 되지 않아도 되는 셀이여서 일단 이슈를 해결했지만, 추후 재수정을 진행해야겠다.</li></ul></li></ol><ol start="3"><li>섹션 헤더 및 풋터 숨김처리 및 섹션 높이 관련 수정들<ul><li>예를 들어, 셀이 터치되었을 때 섹션의 헤더 및 풋터 높이를 수정하거나 숨김처리를 하고 싶은 경우 collectionView를 reload하게되면 collectionViewLayout을 재설정하게 되는데 섹션 풋터를 숨기고싶다면 <code>section.boundarySupplementaryItems</code> 에 섹션헤더만 주입하거나 섹션 풋터 높이를 변경하고 싶다면 footer의 height를 변경하면 된다. → <strong>즉, reload를 하는 경우 레이아웃을 재설정해주면 된다.</strong></li></ul></li></ol><ol start="4"><li>태그목록 화면 개발 중 레이블 텍스트 짤림 이슈<ul><li>태그목록 화면을 개발하였는데 reload를 하게 되면 셀의 너비를 estimated로 너비를 계산하기 때문에 레이블의 텍스트가 짤리는 이슈가 발생했다. 해당 이슈를 해결하기 위해 임의의 텍스트를 prepareForReuse에도 추가하거나 레이아웃을 재설정시도등을 하였지만, 해결되지 않았다. 그래서estimated의 계산방식을 찾아보려고 했지만 애플에서 정확히 어떤식으로 너비를 계산하는지 알려주지 않고 있는 것 같다. 추후 정확한 이슈 원인에 대해서 자세히 찾아봐야겠다.</li></ul></li></ol><hr><h3>🚀 UI 관련 이슈</h3><ul><li>SnapKit을 사용할 때 safeArea기준으로 constraints를 작성하면 updateConstraints를 사용할 수 없다.</li><li>테이블뷰 섹션 풋터를 <code>systemLayoutSizeFitting</code> 을 사용하여 Height를 계산한 후 섹션 풋터 내부의 stackview를 superview의 bottom에 맞추면 stackview가 짤리는 이슈가 발생한다.<ul><li>테이블뷰 섹션 풋터 높이를 계산하는 <code>systemLayoutSizeFitting</code> 원리를 추후 자세히 찾아봐야겠다.</li></ul></li></ul><hr><h3>🙋🏻‍♂️ 기타 사항</h3><ol><li>Bitbucket Pull Request목록에 STALE태그가 표시되었는데 확인해본 결과 PR이 평소보다 오래 열려있거나 최근에 업데이트 되지 않은 경우 표시된다고 한다.</li></ol>]]></content:encoded></item><item><guid isPermaLink="true">https://sookim-1.github.io/posts/006-20240311</guid><title>번호 : 006, 작성일자: 2024-03-11</title><description>FCM Token 갱신, Socket 및 Push 응답 메시지 정리, CollectionView Compositional Layout, FireStore 사용 시 빌드시간 증가 이슈, 깃허브 블로그 마크다운 이모지 배포 이슈</description><link>https://sookim-1.github.io/posts/006-20240311</link><pubDate>Mon, 11 Mar 2024 15:00:00 +0000</pubDate><content:encoded><![CDATA[<h1>번호 : 006, 작성일자: 2024-03-11</h1><h2>2024.03.04 ~ 2024.03.10</h2><h3>🔄 FCM Token 갱신</h3><p>현재 회사에서는 Firebase 프로젝트를 Debug모드와 Release모드를 Firebase프로젝트 단위로 분리하여 사용 중이다. FCM 토큰값을 MessagingDelegate의 didReceiveRegistrationToken 메서드를 통해 전달받은 fcmToken 값을 자체 서버에 저장하여 사용자와 fcmToken값을 매칭시키는 중이다.</p><p>그런데 기기에서 Debug모드를 설치되어 있다가 Release모드를 빌드했을 때와 반대의 경우, 따로 서버에 변경된 fcmToken값을 전달하는 로직이 빠져있었다.</p><p>fcmToken의 값이 변경되는 시점은 아래 4가지 경우이다.</p><ul><li>새 기기에서 앱 복원</li><li>사용자가 앱 제거/재설치</li><li>사용자가 앱 데이터 소거</li><li>앱이 인스턴스 ID를 삭제</li></ul><p>따라서 직접 갱신을 해주는 로직을 추가하였다.</p><pre><code class="language-swift">// FCM 토큰 삭제
Messaging.messaging().deleteToken { error in
    print(error)
}

// FCM 토큰 조회
Messaging.messaging().token { token, error in
  if let error = error {
    print("Error fetching FCM registration token: \(error)")
  } else if let token = token {
    print("FCM registration token: \(token)")
  }
}
</code></pre><ul><li>fcmToken을 삭제는 필수가 아니고 조회한 후 서버에 사용자와 fcmToken값을 재매칭하도록만 수정하였다.</li></ul><hr><h3>🗒️ Socket, Push 메시지 정리</h3><p>현재 회사에서 Push알림 payload에 JSONString값을 전달받아 data처리를 할 수 도 있고, Socket을 사용하여 JSON을 전달받아 data처리를 하고 있다.</p><p>2가지 경우 data가 다르게 오는 부분들을 분석하고 JSON형식의 통일성을 위해 직접 받았을 때 Log를 정리하여 문서화작업을 진행했다.</p><hr><h3>📱 CollectionView Compositional Layout</h3><p>신규 화면개발을 진행하기 위해 Figma디자인을 확인하였는데 반복되는 데이터가 몇가지 있고 확장성을 위해 CollectionView Compositional Layout을 사용하여 개발을 진행했다.</p><p>저번 프로필화면개발 당시에는 Diffable DataSource를 같이 사용하여 개발해봐서 이번에는 기본 DataSource를 사용하여 개발을 진행했다. 각 섹션별로 Header와 Footer를 구현하기 위해 UICollectionReusableView를 사용했는데 viewForSupplementaryElementOfKind 메서드에서 조건문을 조심하지 않으면 재사용되기 때문에 주의해서 사용해야겠다.</p><hr><h3>🚀 FireStore 사용 시 빌드시간 증가 이슈</h3><p>채팅내역 DB관리를 FirebaseRealtimeDataBase에서 FireStore로 변경한 후 Xcode 빌드시간이 기하급수적으로 증가했다. 빌드시간 단축을 위해 찾아본 결과 FireStore는 C++로 구성된 파일이 많은데 Xcode로 빌드하는 경우 컴파일할 때 시간이 증가할 수 있다는 내용을 <a href="https://github.com/invertase/firestore-ios-sdk-frameworks">FireStore iOS SDK 저장소</a>의 ReadMe에서 확인을 했다.</p><ul><li>기존의 pod 설치 명령어는 <code>pod 'FirebaseFirestore', '10.19.0'</code> 이였다.</li><li>변경된 pod 설치 명령어는 <code>pod 'FirebaseFirestore', :git =&gt; '&lt;https://github.com/invertase/firestore-ios-sdk-frameworks.git&gt;', :tag =&gt; '10.19.0'</code> 로 변경했다.</li></ul><p>빌드시간이 FireStore로 변경 전과 유사하게 줄어들었다. 즉, 미리 컴파일된 바이너리파일에서 FireStore를 사용하도록 변경한 것이다.</p><hr><h3>🙋🏻‍♂️ 기타 사항</h3><ol><li>깃허브 블로그를 Swift언어를 사용한 Publish라이브러리를 사용하여 배포 중인데 마크다운 문법 중 특정 이모지를 사용하면 배포 workflow가 실패하는 부분이 있어서 해당 부분을 수정했다.</li></ol>]]></content:encoded></item><item><guid isPermaLink="true">https://sookim-1.github.io/posts/005-20240304</guid><title>번호 : 005, 작성일자: 2024-03-04</title><description>Custom Push, APNs Payload 형식, 앱스토어 Reject, 빌드 시간 단축, Appstore Connect, Sentry fastlane plugin</description><link>https://sookim-1.github.io/posts/005-20240304</link><pubDate>Mon, 4 Mar 2024 18:00:00 +0000</pubDate><content:encoded><![CDATA[<h1>번호 : 005, 작성일자: 2024-03-04</h1><h2>2024.02.27 ~ 2024.03.03</h2><h3>🔥 Push 신규 케이스 추가 및 Custom Push</h3><p>기본적으로 서비스에서 Socket을 사용 중이지만 추가적으로 Push를 이용하여 데이터전달을 추가적으로 받고 있는데 신규 케이스를 추가하는 작업을 진행했다.</p><p>iOS에서는 APNs로 Payload형식을 맞추어 값을 지정하여 Push를 전송해야 APNs에서 기기로 전달을 하는데 해당 형식을 수정할 부분등이 있었고 Foreground에서 Push를 표시하는 작업도 진행했다.</p><p>추후 Custom Push작업을 진행할 수 도 있기 때문에 Push에 Attachment를 이용하여 이미지를 전달받는 방법과 값을 변경하는 방법등 <a href="https://ios-development.tistory.com/1280">김종권iOS블로그 - Push 섹션</a>를 참고하여 테스트를 해보았다.</p><p>Notification Service Extension을 진행하면서 발생한 이슈가 한가지 있었는데 <strong>Command ValidateEmbeddedBinary failed with a nonzero exit code</strong> 해당 에러는 Notification Service Extension 타겟의 Bundle Version들이 Host 타겟과 다르기 때문에 발생한 이슈여서 버전을 맞춰주어 해결했다.</p><hr><h3>🛫 앱스토어 Reject</h3><p>앱스토어 심사를 제출한지 하루만에 Reject을 받았는데 사유는 <strong>Guideline 2.1 - Performance - App Completeness</strong> 심사자의 아이패드 에어에서 흰 화면에서 진행이 안되는 이슈였다. 배포를 진행할 때 fastlane을 이용하여 배포를 하는데 Archive를 진행하는 도중 일부 오류가 발생한 것 같다. 재배포를 진행한 후 시뮬레이터로 동일한 기기와 동일한 버전으로 실행한 경우 진행이 되었기 때문에 재심사를 요청했다.</p><p>과거에 관련한 이슈가 있었는데 fastlane을 이용해 서로 다른 컴퓨터에서 배포하였을 때 어떤 버전에서는 특정 iOS버전이 빌드가 잘 되었고, 다른 컴퓨터에서 배포한 버전에서는 특정 iOS버전이 충돌이 나는 이슈가 있었다.</p><hr><h3>🙋🏻‍♂️ 기타 사항</h3><ol><li>최근에 Firebase 라이브러리의 Pod version을 업데이트한 이후에 기하급수적으로 빌드시간이 증가되었다.(약 2배) 따라서 Xcode 빌드시간을 계산하는 옵션을 활성화하고 오래걸리는 코드블록에 경고표시를 하여 확인을 진행했다. 추후 빌드시간 단축을 위해 작업을 진행해야겠다.</li><li>AppStore Connect를 들어갔는데 프로파일, 인증서, 기기등 사용하지 않는 값들이 남아있어서 확인 후 정리하였다.</li><li>fastlane을 이용하여 sentry를 upload할 때 plugin을 변경하면 소스코드를 더 자세히 표시할 거로 예상했는데 예상과 다르게 동일하여서 더 자세히 알아봐야겠다.</li></ol>]]></content:encoded></item><item><guid isPermaLink="true">https://sookim-1.github.io/posts/004-20240227</guid><title>번호 : 004, 작성일자: 2024-02-27</title><description>FireStore DB 구조 설계, Sentry 업그레이드, Bitbucket HTTPS 인증, git credential helper</description><link>https://sookim-1.github.io/posts/004-20240227</link><pubDate>Tue, 27 Feb 2024 14:00:00 +0000</pubDate><content:encoded><![CDATA[<h1>번호 : 004, 작성일자: 2024-02-27</h1><h2>2024.02.19 ~ 2024.02.26</h2><h3>🔥 FireStore DB 구조 설계</h3><p>지지난 주에 기존 FirebaseRealTimeDataBase에서 사용하던 구조로 FireStore도 동일하게 진행했었는데 추후에 고려할 사항들이 몇가지 추가되었다.</p><ul><li>여정 중 화면이 아닌 화면에서도 채팅화면 진입 가능</li><li>1:1 채팅이 아닌 1:n채팅 고려</li><li>채팅방 내에서 읽음 표시 카운트 기능 추가</li><li>채팅방 외부에서 안 읽은 메시지 카운트 표기 기능 추가</li></ul><p>따라서 해당 사항들을 고려하기 위해 추가될 필드도 있고 처음부터 설계를 고려해서 작업을 하기 위해서 FireStore문서를 확인하여 데이터형식등을 참고하여 설계를 변경하였다.</p><p>새로운 형식은 reference라는 데이터형식이 있었는데 특정 문서를 참고할 수 있는 게 데이터를 변경할 때 편리할 것 같다.</p><hr><h3>🛫 iOS앱 Sentry 업그레이드</h3><p>Sentry를 이미 적용 중이였는데 로그를 확인하기에 데이터표시되는 부분이 미흡한 것 같아서 공식문서를 확인하여 추가할 옵션등을 살펴보았다.</p><p><a href="https://sentry.io/for/cocoa/">Cocoa Sentry</a> 를 확인해본 결과 iOS말고도 macOS, watchOS, visionOS, tvOS등 모두 지원하고 충돌로그만 보는 것이 아니라 성능확인도 할 수 있고, HTTP status Code별로 표시여부를 설정할 수 있고 앱이 사용자이벤트를 받을 수 있는지 모니터링 하는 애플 자체의 WatchDog 종로여부도 표시할 수 도 있었다.</p><p>일단 iOS팀에서 Sentry를 사용하는 주 목적은 충돌로그를 확인하고 충돌을 해결하기 위한 목적이기 때문에 Http 종료여부와 WatchDog 종료여부는 미표시하고, 충돌시 프로젝트의 코드를 표시하고, 스크린샷과 뷰의 계층구조 첨부파일도 함께 보내도록 변경하였다.</p><hr><h3>🗺️ Bitbucket HTTPS 인증</h3><p>기존의 HTTPS를 이용하여 Bitbucket 저장소에 접근하고 작업을 진행하도록 하였는데 Bitbucket은 HTTPS를 이용할 때 인증방식을 App Password를 통해 진행한다.</p><p>AppPassword를 발급받을 때는 권한허용범위를 지정한 후 발급받을 수 있어서 해당 범위를 처음부터 설정을 할 때 고려해야 했다. 그래서 Mac Runner에 설정된 AppPassword를 재발급받고 Mac Runner의 AppPassword 설정된부분을 모두 수정하였다.</p><p>git credential-helper를 사용하면 맥북의 키체인을 통하여 저장된 AppPassword를 가져와여 인증을 할 수 있어서 credential-helper도 설정하여서 인증부분관련해서는 작업을 모두 마쳤다.</p><hr><h3>🙋🏻‍♂️ 기타 사항</h3><ol><li>지난 주에는 이슈 관련 수정도 진행했고 UI,UX관련한 작업들을 진행했다. API호출을 하는 경우 빠르게 중복클릭하면 화면이 여러번 전환되는 부분과 한 화면에서 UI Component들이 변경될 때 매끄럽지 않은 부분들도 수정하였는데 이런 이슈들을 수정할 때 앱이 안정되보이는 것 같다.</li></ol>]]></content:encoded></item><item><guid isPermaLink="true">https://sookim-1.github.io/posts/003-20240219</guid><title>번호 : 003, 작성일자: 2024-02-19</title><description>Mac Runner용도 초기설정, FireStore 마이그레이션, 지역체크로직, 앱스토어 다국어 영향도파악</description><link>https://sookim-1.github.io/posts/003-20240219</link><pubDate>Mon, 19 Feb 2024 16:00:00 +0000</pubDate><content:encoded><![CDATA[<h1>번호 : 003, 작성일자: 2024-02-19</h1><h2>2024.02.13 ~ 2024.02.18</h2><h3>🔥 Migrating from Firebase Realtime Database To FireStore</h3><p>앱내에서 채팅내역을 저장하고 불러오는 데이터를 모두 FirebaseRealtimeDataBase 서비스를 사용 중이였는데 속도, 관리, 비용측면등등 대부분 FireStore를 권장한다고 하고 Firebase팀에서도 권장하는 서비스이기 때문에 회의 후 FireStore로 마이그레이션작업을 진행하기로 했다.</p><p>일단 iOS에서 Firebase를 모두 pod으로 설치하여 사용 중이였는데 FirebaseStoreSwift를 사용하기 위해서 기존에 사용중이던 의존성으로 추가되는 pod들도 모두 버전업을 진행해야 했다.</p><p>버전업을 진행한 방식은 <a href="https://cocoapods.org/">Cocoa Pod</a> 검색창에서 라이브러리 검색후 <a href="https://github.com/CocoaPods/Specs">CocoaPods Spec</a> 이동하여 dependencies 키값 확인 후 따로 설치하는 것들 제거, 버전별 맞춤처리를 하여 버전업을 완료했다.</p><p>기존의 FirebaseRealtimeDB를 사용했던 DB구조로 FireStore로 저장하고 불러오는 것은 간단했다. FireStore는 파일을 들고 있는 폴더가 Collection이라고 생각하고 파일을 Document로 생각하니까 DB구조가 이해하기 쉬웠다.</p><hr><h3>🛫 iOS앱 CI/CD + Mac 초기설정</h3><p>회사에서 남는 맥북을 구할 수 있어서 해당 맥북을 Runner로 사용하여 빗버킷의 파이프라인을 구동하도록 하는 작업을 진행했다. 맥북은 완전 초기화된 상태였기 때문에 homebrew, cocoapod, git-lfs, git, sourcetree, xcode등등 필요한 프로그램들을 모두 설치했다.</p><p>기존의 iOS팀에서는 HTTPS를 사용하여 private저장소에 대한 접근권한을 처리하였는데 SSH로 변경하려고 SSH Key를 발급받고 등록했지만 다른 모든 컴퓨터에서는 SSH Key가 등록되어있지 않아서 다시 빗버킷의 앱암호를 이용하여 접근권한을 처리했다.</p><p>Flask앱을 PythonAnywhere에서 작동을 하고 있기 때문에 빗버킷의 앱암호는 보안이 중요하기 때문에 <a href="https://help.pythonanywhere.com/pages/environment-variables-for-web-apps/">.env사용방법</a>을 확인한 후 적용했다.</p><p>파이프라인을 구동하는 계정은 모두 회사관리자계정으로 통합하기로 진행해서 git author와 관련된 값들을 모두 수정했고 정상적으로 모든 작업을 완료했다.</p><hr><h3>🗺️ 서비스 지역체크 로직 리팩토링</h3><p>앱내에서 운행가능한 지역이 서울위주로 제한적인데 사용자가 다른 지역을 선택했을 때 검증하는 로직이 통일되어 있지 않고 불필요한 API호출등이 있어 아래 작업사항등을 진행했다.</p><ol><li>에러메시지를 표기하는 방식을 통일했다.</li><li>Tmap API를 호출할 때 request Param의 키값인 addressType을 통일했다.</li><li>API호출을 줄일 수 있는 부분들을 모두 줄이도록 리팩토링을 진행했다.</li><li>서비스 지역체크하는 시점을 문서로 작성했다.</li></ol><hr><h3>🙋🏻‍♂️ 기타 사항</h3><ol><li>추후 작업 중에 다른 나라사람들이 이용할 수 있도록 다국어를 지원하는 작업이 진행될 수 도 있다고 하여서 세금 및 계약에 대해 영향도를 파악해보았는데 앱내에 인앱결제가 없거나 유료앱이 아니라면 영향도는 없다고 파악했다.</li></ol>]]></content:encoded></item><item><guid isPermaLink="true">https://sookim-1.github.io/posts/002-20240213</guid><title>번호 : 002, 작성일자: 2024-02-13</title><description>Dart언어 학습, Hotfix 배포, Sentry 도입, CI/CD 고도화</description><link>https://sookim-1.github.io/posts/002-20240213</link><pubDate>Tue, 13 Feb 2024 15:00:00 +0000</pubDate><content:encoded><![CDATA[<h1>번호 : 002, 작성일자: 2024-02-13</h1><h2>2024.02.05 ~ 2024.02.12</h2><h3>🚴🏻‍♂️ Dart 언어 접근</h3><p>지난 주부터 노마드코더에서 진행하는 Flutter챌린지를 시작했다.</p><p>Flutter는 Dart라는 프로그래밍언어를 사용 중이기 때문에 Dart언어에 대해서 먼저 시작했다.</p><p>Dart언어를 공부하면서 가장 신기했던 점은 컴파일러가 다양하다는 점이였고 대부분의 문법은 최신 프로그래밍언어들과 큰 차이가 없는 것 같았다.</p><p>Dart언어특징, 변수, 자료형, 함수, 클래스에 대해서 이번주 모두 강의가 끝났다.</p><p>강의의 특징은 Dart언어의 모든 부분을 학습하는 것이 아니라 Flutter를 사용하는데 필요한 수준정도로만 진행하는 것 같았다.</p><hr><h3>🚨 iOS앱 Hotfix 배포</h3><p>배포한 iOS앱에서 카드결제가 정상적으로 이뤄지지 않는 이슈가 발생하여서 빠르게 수정하여 Hotfix로 배포를 진행했다. 배포를 진행해야 해서 위클리가 하루 연기되어서 다음날 진행했다.</p><p>기존의 존재했던 코드와 새로 작성한 코드와 충돌한 이슈였는데 기존의 존재했던 코드가 이전의 기획에는 적합하지만 변경된 기획에서는 적합하지 않던 코드여서 다음부터 작업을 진행할 때 조금 더 새로운 기획을 기준으로 작업할 때 관련된 코드들을 자세히 보는 습관을 가지도록 해야겠다.</p><hr><h3>🚀 iOS앱 Sentry 도입</h3><p>앱에서 충돌이 발생했을 때 어떤 이유로 충돌이 발생했는지 알려주는 서비스로 대표적으로 Firebase Crashlytics를 사용하기 때문에 현재 팀에서도 해당 서비스를 사용했었다.</p><p>Firebase Crashlytics는 무료이고 모바일이라는 범주안에서는 괜찮은 선택인 것 같다. 하지만 서버가 충돌했을 때 로그를 기록하기 위해서 Sentry라는 서비스가 더 적합하다고 팀에서는 판단하여 서버팀 먼저 Sentry를 도입하였고 지난 주에 모바일팀도 Sentry를 도입했다.</p><p>도입하고 나서 느낀 점은 조금 더 충돌이유와 충돌시점에 스크린샷, 뷰의 상관관계등 옵션들이 매우 다양했다. 도입을 한 후 모두 테스트를 하였고 현재는 Crashlytics와 함께 사용해나갈 예정이다.</p><hr><h3>🛫 iOS앱 CI/CD</h3><p>지지난주에 안드로이드팀에서 Firebase AppDistribution이라는 서비스를 통해 안드로이드앱을 배포하는 작업을 완료해서 사용 중이였다.</p><p>iOS에서도 사용가능할만 할지에 대해서 알아보기 위해 직접도입을 진행해보았는데 iOS에서는 AppTester라는 앱을 직접 다운로드할 수 있는 것이 아니고 웹사이트로 바로가기형태로 진행되는 것 같다.</p><p>배포를 모두 도입해보고 느낀점은 속도는 TestFlight보다 빠른 것 같지만 프로파일설정도 해야하고 기기등록도해야하는 등 처음설정하는 부분이 복잡한 것 같았다.</p><p>그래서 접근성이 편리한 TestFlight를 기존대로 사용할 것 같다.</p><p>지지난주에 만든 Slack Slash를 이용하여 배포하는 작업을 조금 변형하여 Jenkins를 이용해서 Bitbucket pipeline을 트리거하려고 Jenkins에 대해서 공부했다. 하지만 팀에서 Jenkins를 돌리는 머신이 mac이 아니여서 진행하는데 어려움이 있다고 판단했다.</p><hr><h3>🙋🏻‍♂️ 기타 사항 (이슈 수정 위주)</h3><ol><li>네이버지도 SDK를 사용중인데 카메라가 외국까지 이동이 가능 했었는데 현재 팀의 서비스를 제공하는 국가는 한국으로 제한적이여서 카메라영역을 제한하는 것이 적합하다고 판단하여 위클리를 진행할 때 협의하여 서비스 제공하는 지역으로 카메라영역을 제한하는 작업을 진행했다.</li><li>FCM토큰과 서버에 저장된 토큰값이 동일하지 않을 때 Push알림이 정상적으로 오지 않는 이슈가 있었는데 FCM토큰을 직접 재발급하는 작업은 모두 권장되지않도록 공식문서에 작성되어 있어서 시점을 파악할 수 있도록 해봐야겠다.</li><li>코드에서 메모리해제가 되지않아 여러 이슈가 발생하여서 전체적으로 확인하여 메모리해제가 되도록 작업을 진행했다.</li></ol>]]></content:encoded></item><item><guid isPermaLink="true">https://sookim-1.github.io/posts/001-20240205</guid><title>번호: 001, 작성일자: 2024-02-05</title><description>접근권한 관련 리젝 해결, iOS 자동배포 구축, 블로그 생성</description><link>https://sookim-1.github.io/posts/001-20240205</link><pubDate>Mon, 5 Feb 2024 15:00:00 +0000</pubDate><content:encoded><![CDATA[<h1>번호: 001, 작성일자: 2024-02-05</h1><h2>2024.01.29 ~ 2024.02.04</h2><h3>🫠 Reject</h3><p>지난 주에는 앱스토어에 라이더앱 정규배포를 진행했는데 심사과정에서 reject을 받았다.</p><p>reject 사유는 Guideline 5.1.1 - Legal - Privacy - Data Collection and Storage 였는데 상세 사유에는 카메라, 사진 접근권한에 대한 설명이 충분하지 않았다는 것이였다.</p><p>이번 배포에 접근권한에 대한 설명을 변경하였는데 해당 설명문이 자세하지 않았던 것 같다.</p><p>따라서 앱을 첫 설치할 때 접근권한 안내페이지의 문구와 Info.plist 권한 요청문구를 통일시키고 목적에 대해서 자세히 작성하여 통과했다.</p><p>수정된 접근권한 안내문</p><ul><li>카메라 : 프로필, 결제 카드 등록, 고객센터 상담 시 전송할 사진 또는 동영상 촬영을 위해 필요해요.</li><li>사진 : 프로필 사진 설정, 파일 첨부 및 여정내역 저장을 위해 필요해요.</li></ul><hr><h3>🛫 Slack + Flask + Bitbucket Pipeline + Fastlane</h3><p>기본적으로, 현재 라이더앱을 테스트하는 경우 Fastlane을 사용하여 TestFlight에 배포를 진행한 후, QA를 진행 중이다.</p><p>하지만 터미널에서 직접 수동으로 Fastlane명령어를 실행하고 있기 때문에 조금 더 간편한 방법이 없을 지에대해서 검색해보던 중 Slack 명령어를 이용하여 바로 배포하는 방법이 있다고 하여서 적용해보았다.</p><p>정식타겟을 사용하여 작업을 진행하면 TestFlight에 버전관리가 힘들어 질것 같아서 베타타겟을 사용하여 작업을 진행했다.</p><p>작업은 Slack Slash명령어를 입력하면 Flask앱에서 Bitbucket Pipeline을 trigger한 후, Pipeline에서 Fastlane명령어를 실행하여 TestFlight에 배포되는 작업이였다.</p><p>모두 완료 후 도입하게 된다면 bitbucket Pipeline을 빌드하기 위한 Runner가 self-hosted를 통해 진행해야 하므로 원격호스팅을 도입해야 하는 제약이 있지만 만약 Github Action을 사용하면 해결될 수 도 있을 것 같다.</p><hr><h3>🙋🏻‍♂️ 기타 사항</h3><p>티스토리 블로그와 Velog, 깃허브 블로그들의 장단점에 대해서 분석해보고 기존의 Velog의 카테고리 관리가 불편하다고 느껴서 개발관련 글은 모두 티스토리블로그로 이전하고 깃허브블로그에서는 회고록을 작성하도록 정했다.</p><p>관련 링크</p><ul><li><a href="https://sookim-1.tistory.com/">sookim's 티스토리 블로그</a></li><li><a href="https://velog.io/@sookim-1/posts">sookim's Velog</a></li><li><a href="https://sookim-1.github.io/">sookim's GithubBlog</a></li></ul><p>지난 주 이슈와 신규작업은 주소 관련된 작업을 진행했다.</p>]]></content:encoded></item></channel></rss>