<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>sookim-1</title><description>Weekly Episodes</description><link>https://sookim-1.github.io</link><language>ko</language><lastBuildDate>Tue, 13 Feb 2024 07:00:16 +0000</lastBuildDate><pubDate>Tue, 13 Feb 2024 07:00:16 +0000</pubDate><ttl>250</ttl><atom:link href="https://sookim-1.github.io/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://sookim-1.github.io/posts/002-20240213</guid><title>번호 : 002, 작성일자: 2024-02-13</title><description>Dart언어 학습, Hotfix 배포, Sentry 도입, CI/CD 고도화</description><link>https://sookim-1.github.io/posts/002-20240213</link><pubDate>Tue, 13 Feb 2024 15:00:00 +0000</pubDate><content:encoded><![CDATA[<h1>번호 : 002, 작성일자: 2024-02-13</h1><h2>2024.02.05 ~ 2024.02.12</h2><h3>🚴🏻‍♂️ Dart 언어 접근</h3><p>지난 주부터 노마드코더에서 진행하는 Flutter챌린지를 시작했다.</p><p>Flutter는 Dart라는 프로그래밍언어를 사용 중이기 때문에 Dart언어에 대해서 먼저 시작했다.</p><p>Dart언어를 공부하면서 가장 신기했던 점은 컴파일러가 다양하다는 점이였고 대부분의 문법은 최신 프로그래밍언어들과 큰 차이가 없는 것 같았다.</p><p>Dart언어특징, 변수, 자료형, 함수, 클래스에 대해서 이번주 모두 강의가 끝났다.</p><p>강의의 특징은 Dart언어의 모든 부분을 학습하는 것이 아니라 Flutter를 사용하는데 필요한 수준정도로만 진행하는 것 같았다.</p><hr><h3>🚨 iOS앱 Hotfix 배포</h3><p>배포한 iOS앱에서 카드결제가 정상적으로 이뤄지지 않는 이슈가 발생하여서 빠르게 수정하여 Hotfix로 배포를 진행하였습니다. 배포를 진행해야 해서 위클리가 하루 연기되어서 다음날 진행했다.</p><p>기존의 존재했던 코드와 새로 작성한 코드와 충돌한 이슈였는데 기존의 존재했던 코드가 이전의 기획에는 적합하지만 변경된 기획에서는 적합하지 않던 코드여서 다음부터 작업을 진행할 때 조금 더 새로운 기획을 기준으로 작업할 때 관련된 코드들을 자세히 보는 습관을 가지도록 해야겠다.</p><hr><h3>🚀 iOS앱 Sentry 도입</h3><p>앱에서 충돌이 발생했을 때 어떤 이유로 충돌이 발생했는지 알려주는 서비스로 대표적으로 Firebase Crashlytics를 사용하기 때문에 현재 팀에서도 해당 서비스를 사용했었다.</p><p>Firebase Crashlytics는 무료이고 모바일이라는 범주안에서는 괜찮은 선택인 것 같. 하지만 서버가 충돌했을 때 로그를 기록하기 위해서 Sentry라는 서비스가 더 적합하다고 팀에서는 판단하여 서버팀 먼저 Sentry를 도입하였고 지난 주에 모바일팀도 Sentry를 도입했다.</p><p>도입하고 나서 느낀 점은 조금 더 충돌이유와 충돌시점에 스크린샷, 뷰의 상관관계등 옵션들이 매우 다양했다. 도입을 한 후 모두 테스트를 하였고 현재는 Crashlytics와 함께 사용해나갈 예정이다.</p><hr><h3>🛫 iOS앱 CI/CD</h3><p>지지난주에 안드로이드팀에서 Firebase AppDistribution이라는 서비스를 통해 안드로이드앱을 배포하는 작업을 완료해서 사용 중이였다.</p><p>iOS에서도 사용가능할만 할지에 대해서 알아보기 위해 직접도입을 진행해보았는데 iOS에서는 AppTester라는 앱을 직접 다운로드할 수 있는 것이 아니고 웹사이트로 바로가기형태로 진행되는 것 같다.</p><p>배포를 모두 도입해보고 느낀점은 속도는 TestFlight보다 빠른 것 같지만 프로파일설정도 해야하고 기기등록도해야하는 등 처음설정하는 부분이 복잡한 것 같았다.</p><p>그래서 접근성이 편리한 TestFlight를 기존대로 사용할 것 같다.</p><p>지지난주에 만든 Slack Slash를 이용하여 배포하는 작업을 조금 변형하여 Jenkins를 이용해서 Bitbucket pipeline을 트리거하려고 Jenkins에 대해서 공부했다. 하지만 팀에서 Jenkins를 돌리는 머신이 mac이 아니여서 진행하는데 어려움이 있다고 판단했다.</p><hr><h3>🙋🏻‍♂️ 기타 사항 (이슈 수정 위주)</h3><ol><li>네이버지도 SDK를 사용중인데 카메라가 외국까지 이동이 가능 했었는데 현재 팀의 서비스를 제공하는 국가는 한국으로 제한적이여서 카메라영역을 제한하는 것이 적합하다고 판단하여 위클리를 진행할 때 협의하여 서비스 제공하는 지역으로 카메라영역을 제한하는 작업을 진행했다.</li><li>FCM토큰과 서버에 저장된 토큰값이 동일하지 않을 때 Push알림이 정상적으로 오지 않는 이슈가 있었는데 FCM토큰을 직접 재발급하는 작업은 모두 권장되지않도록 공식문서에 작성되어 있어서 시점을 파악할 수 있도록 해봐야겠다.</li><li>코드에서 메모리해제가 되지않아 여러 이슈가 발생하여서 전체적으로 확인하여 메모리해제가 되도록 작업을 진행했다.</li></ol><p>태그 : Dart, Flutter, Sentry, Hotfix, Firebase, Firebase AppDistribution, Firebase Crashlytics, FirebaseMessaging, NaverMap</p>]]></content:encoded></item><item><guid isPermaLink="true">https://sookim-1.github.io/posts/001-20240205</guid><title>번호: 001, 작성일자: 2024-02-05</title><description>접근권한 관련 리젝 해결, iOS 자동배포 구축, 블로그 생성</description><link>https://sookim-1.github.io/posts/001-20240205</link><pubDate>Mon, 5 Feb 2024 15:00:00 +0000</pubDate><content:encoded><![CDATA[<h1>번호: 001, 작성일자: 2024-02-05</h1><h2>2024.01.29 ~ 2024.02.04</h2><h3>🫠 Reject</h3><p>지난 주에는 앱스토어에 라이더앱 정규배포를 진행했는데 심사과정에서 reject을 받았다.</p><p>reject 사유는 Guideline 5.1.1 - Legal - Privacy - Data Collection and Storage 였는데 상세 사유에는 카메라, 사진 접근권한에 대한 설명이 충분하지 않았다는 것이였다.</p><p>이번 배포에 접근권한에 대한 설명을 변경하였는데 해당 설명문이 자세하지 않았던 것 같다.</p><p>따라서 앱을 첫 설치할 때 접근권한 안내페이지의 문구와 Info.plist 권한 요청문구를 통일시키고 목적에 대해서 자세히 작성하여 통과했다.</p><p>수정된 접근권한 안내문</p><ul><li>카메라 : 프로필, 결제 카드 등록, 고객센터 상담 시 전송할 사진 또는 동영상 촬영을 위해 필요해요.</li><li>사진 : 프로필 사진 설정, 파일 첨부 및 여정내역 저장을 위해 필요해요.</li></ul><hr><h3>🛫 Slack + Flask + Bitbucket Pipeline + Fastlane</h3><p>기본적으로, 현재 라이더앱을 테스트하는 경우 Fastlane을 사용하여 TestFlight에 배포를 진행한 후, QA를 진행 중이다.</p><p>하지만 터미널에서 직접 수동으로 Fastlane명령어를 실행하고 있기 때문에 조금 더 간편한 방법이 없을 지에대해서 검색해보던 중 Slack 명령어를 이용하여 바로 배포하는 방법이 있다고 하여서 적용해보았다.</p><p>정식타겟을 사용하여 작업을 진행하면 TestFlight에 버전관리가 힘들어 질것 같아서 베타타겟을 사용하여 작업을 진행했다.</p><p>작업은 Slack Slash명령어를 입력하면 Flask앱에서 Bitbucket Pipeline을 trigger한 후, Pipeline에서 Fastlane명령어를 실행하여 TestFlight에 배포되는 작업이였다.</p><p>모두 완료 후 도입하게 된다면 bitbucket Pipeline을 빌드하기 위한 Runner가 self-hosted를 통해 진행해야 하므로 원격호스팅을 도입해야 하는 제약이 있지만 만약 Github Action을 사용하면 해결될 수 도 있을 것 같다.</p><hr><h3>🙋🏻‍♂️ 기타 사항</h3><p>티스토리 블로그와 Velog, 깃허브 블로그들의 장단점에 대해서 분석해보고 기존의 Velog의 카테고리 관리가 불편하다고 느껴서 개발관련 글은 모두 티스토리블로그로 이전하고 깃허브블로그에서는 회고록을 작성하도록 정했다.</p><p>관련 링크</p><ul><li><a href="https://sookim-1.tistory.com/">sookim's 티스토리 블로그</a></li><li><a href="https://velog.io/@sookim-1/posts">sookim's Velog</a></li><li><a href="https://sookim-1.github.io/">sookim's GithubBlog</a></li></ul><p>지난 주 이슈와 신규작업은 주소 관련된 작업을 진행했다.</p>]]></content:encoded></item></channel></rss>